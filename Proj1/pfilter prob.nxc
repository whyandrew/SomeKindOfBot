/* macros for directions, chosen to not conflict with other definitions
   and to allow arithmetic between directions*/
#define NORTH 100
#define EAST 101
#define SOUTH 102
#define WEST 103

/* macros for diagonal directions */
#define NORTHEAST 1000
#define SOUTHEAST 1001
#define SOUTHWEST 1002
#define NORTHWEST 1003

/* File related macros */
#define FILENAME "mapdata.txt"
#define READSIZE 10

/* Function like macro to convert characters from files to the corresponding
   int value.*/
#define ASCII_TO_INT(a) a-48

/* macros for the map dimensions. Based on yellow grid intersections*/
#define GWIDTH 3
#define GHEIGHT 5

#define RESETTHRESHOLD 100

#define THRESHOLD 0.90
#define MATCH 2 
#define MISMATCH 0.5

/* You may want to define macros to keep track of certain turning angles and
   speeds throughout your code. This provides an easy way to change them */

#define COLORSENSOR SENSOR_1

#define BLACK   1
#define WHITE   6
#define BLUE    2
#define GREEN   3
#define YELLOW  4
#define RED     5

#define MOTORS OUT_AC

#define FULLSPEED   30
#define FULLSPEED_C FULLSPEED-5 // Motor OUT_C is stronger than A, reduce power to compensate
#define SLOWSPEED   30
#define SLOWSPEED_C SLOWSPEED-5

// Amount of motor sync-rotation to turn robot
#define DEGREE360 1040
#define DEGREE180 520
#define DEGREE90  260
#define DEGREE05  15

// Distance to be adjusted after sensor detects yellow intersection
// Use with FULLSPEED
#define CENTER_DISTANCE 125

// Num of reads to get best color result
#define NUMREAD 400
#define NUMREADLESS 200

// True if still at localization, false if moving to target
bool isLocalizing;
// Save color info when the robo stops during localization step
int g_lastColor;


/* Represents a single particle.

   Each particle has a coordinate given by x and y and also a direction.

   The probability attached to a particle is the likelihood of it being the
   actual position and heading of the robot. This is updated based on the
   robot's surroundings.
   */
struct particle{
       int x;
       int y;
       int theta;
       float prob; /* weight of a particle representing probability */
};

/* Represents an interesection (yellow square) on the grid.

   Holds data on the surroundings of the intersection, namely coloured(or white)
   squares to the NE, SE, SW, NW of the interesection.
   
   Note that the directions are by default in terms of compass directions.
   When given a heading, the directions will change relative to the heading.
   */
struct intersection{
       int NE;
       int SE;
       int SW;
       int NW;
};

string colors[] = {
    "Color 0?",
    "Black   ", // 1
    "Blue    ", // 2
    "Green   ", // 3
    "Yellow  ", // 4
    "Red     ", // 5
    "White   ", // 6
    "Color 7?",
    "Color 8?",
    "Color 9?"
};

int lines[] = {
    LCD_LINE1,
    LCD_LINE2,
    LCD_LINE3,
    LCD_LINE4
};

/*
  Print color on LCD Screen Line 1
*/
inline void printColor(int color)
{
    TextOut(0, LCD_LINE1, colors[color]);
}

/*
    Take Color sensor reading 
    Return the most detected color
*/
int readColor(int numOfSamples)
{    
    int sample = 0;
    int colorSamples[] = {0,0,0,0,0,0,0}; // array index == color define
    int ret;

    for (int i = 0; i < numOfSamples; i++)
    {
        sample = COLORSENSOR;
        colorSamples[sample]++;        
    }

    ret = 1;
    for (int i = 2; i < 7; i++)
    {
        if (colorSamples[i] > colorSamples[ret])
        {
            ret = i;
        }
    }

    return ret;
}

// These are continuous turn..
inline void turnLeft()
{
    OnFwdSync(MOTORS, FULLSPEED, -100);
}
inline void turnRight()
{
    OnFwdSync(MOTORS, FULLSPEED, 100);
}

// Rotate & position sensor to the middle of the black road's width
void locateRoadMiddle()
{
    TextOut(0, LCD_LINE2, "Locating road mid...");
    long startTime, turnTime;
    
    Off(MOTORS);
    // Check if sensor is currently on black or not
    // If on black, move to just outside edge of black
    if (readColor(NUMREAD) == BLACK)
    {
        turnRight();
        until( readColor(NUMREAD) != BLACK);
        Wait(50);
        Off(MOTORS);
    }

    // rotate left and time the width of black color
    turnLeft();

    // TODO : need to do confirm of color for all the "until" statements in case of noise?
    until( readColor(10) == BLACK);
    startTime = CurrentTick();
    //Wait(100);
    until( readColor(20) != BLACK);
    turnTime = CurrentTick() - startTime;
    Wait(100);
    Off(MOTORS);
    Wait(500);

    // Now move to middle of the width base on timestamp
    turnRight();
    until (readColor(10) == BLACK);
    Wait(turnTime * 0.5); // would be 0.5, but use .75 due to motors uneven power in turns
    Off(MOTORS);

    ClearScreen();
}

// Make a 90 turn until sensor see the next black road, 
void turn90(bool isLeft)
{
    //TODO : This needs fixes.... skipping black too often
    locateRoadMiddle();

    bool done = false;
    Off(MOTORS); 

    if (isLeft)
    {
        TextOut(0, LCD_LINE2, "Turning LEFT....");
        turnLeft();
    }
    else
    {
        TextOut(0, LCD_LINE2, "Turning RIGHT....");
        turnRight();
    }
    
    // First, spin til it's NOT black
    while (!done)
    {
        while(BLACK == readColor(NUMREADLESS)) {}

        //Wait(20); // so it's reading a slightly different spot
        if ( BLACK == readColor(NUMREADLESS))
        {
            done = true;    
        }
    }

    // Then, spin til it's black, and double check color
    while (!done)
    {
        while(BLACK != readColor(NUMREADLESS)) {}

        //Wait(20); // so it's reading a slightly different spot
        if ( BLACK == readColor(NUMREADLESS))
        {
            done = true;    
        }
    }

    ClearScreen();

    locateRoadMiddle();
    Off(MOTORS);
}

inline void forwardFullSpeed() 
{
    OnFwdSync(MOTORS, FULLSPEED, 0);
}

inline void turnLeft90()
{
    turn90(true);
}

inline void turnRight90()
{
    turn90(false);
}

// Turn 180 degrees and also check if sensor is on black when finish
void turn180onRed()
{
    bool done = false;
    Off(MOTORS); 

    TextOut(0, LCD_LINE2, "Turning 180....");
    turnLeft();

    // spin til it's black, and double check color
    while (!done)
    {
        while(BLACK != readColor(NUMREADLESS)) {}

        //Wait(20); // so it's reading a slightly different spot
        if ( BLACK == readColor(NUMREADLESS))
        {
            done = true;    
        }
    }

    ClearScreen();

    locateRoadMiddle();
    Off(MOTORS);
}

// TODO: changing this to use onFwdSync and time
inline void turnByDegrees(bool left, int degrees)
{
    // Left turn with RotateMotorEx is faster than right turn with same settings
    // Compensate by reducing left turn "degrees" by 20%
    if (left)
    {
        //degrees = (degrees * 4) / 5 ;
        RotateMotorEx(OUT_AC, FULLSPEED, degrees, -100, true, true);
    }
    else // turn right
    {
        RotateMotorEx(OUT_AC, FULLSPEED, degrees, 100, true, true);
    }
}

// Print error msg on screen and quit program
inline void reportError(string msg)
{
    TextOut(0, LCD_LINE1, "***********************");
    TextOut(0, LCD_LINE2, msg);
    TextOut(0, LCD_LINE3, "***********************");
    Wait(5000);
    Stop(true);
}

/*
    Handle moving back on black route, assume already out of bound
*/
void stayOnBlack()
{
    int factor = 1;
    // always try left side first, true == left
    bool whichSide = true; 
    bool isDone = false;

    TextOut(0, LCD_LINE2, "Off road....");

    while (!isDone)
    {
        NumOut(0, LCD_LINE3, 5 * factor);

        // try left side
        turnByDegrees(whichSide, DEGREE05 * factor);
        Wait(250);

        if (readColor(50) == BLACK)
        {
            isDone = true;
        }
        else
        {   // Left doesn't hit black, try right side
            // TODO : left and right turns are not even, may need to fudge the number a bit...
            turnByDegrees(!whichSide, DEGREE05 * factor * 3 / 2);
            Wait(250);
            if (readColor(50) == BLACK)
            {
                isDone = true;
            }
        }
        factor += 1;
        if (factor > 20)
        {
            // TODO  : corner case when off black just before hitting red,
            // then sensor won't find any black at all by turning left/right.
            // Need to back up a bit but need to make sure after all these
            // turning/checking, the robot direction is still close to when it
            // first started this function (ie need make left & right turns even).
            reportError("ERROR: +100 degrees tested");
        }
    }

    locateRoadMiddle();
    ClearScreen();
}

/* Subroutine which moves the robot forward from one intersection to the next
*/
sub move_robot(){
    ////////////////////////////////////////////////////////////////////////////
    //  TO DO:
    //
    //  Complete this subroutine.
    //  Your robot will need to nagivates its way from one interesection to the
    //  next. If it reaches a red boundary, it will do a 180 degree turn and
    //  return to the previous intersection facing in the opposite direction.
    //
    //  You may need to account for motor "noise" as your robot will not always
    //  make turns perfectly and go straight forward each time.
    //
    ////////////////////////////////////////////////////////////////////////////

    /**** When this func returns, robot sensor would have just detected yellow or RED ****/
    /**** Store last detect color in g_lastColor ***/

    int colorOutput;
    int colorCheck;
    forwardFullSpeed();
    bool isBoundary = false;

    while (!isBoundary)
    {
        while ((colorOutput = readColor(NUMREAD)) == BLACK)
        {
            // spin until it's not black
        }

        Off(MOTORS);

        // Double check color. Possible unreliable previous read if it happens at boundary of 2 colors
        colorCheck = readColor(NUMREAD);
        if (colorCheck != colorOutput)
        {
            TextOut(0, LCD_LINE5, "NOISE: ");
            TextOut(0, LCD_LINE6, colors[colorOutput]);
            colorOutput = colorCheck;
            Wait(2000);
            ClearScreen();
        }
        else
        {
            Wait(500);
        }

        printColor(colorOutput);

        if (RED == colorOutput) // Hit red wall, do 180 turn
        {
            PlayToneEx((colorOutput + 1) * 100,400,1,FALSE);
            g_lastColor = RED;
            isBoundary = true;
            // Adjust forward so sensor is in middle of red before turning 180
            RotateMotorEx(OUT_AC, SLOWSPEED, CENTER_DISTANCE, 0, true, true);
            //turn180onRed();
            //Wait(500);
            //RotateMotorEx(MOTORS, SLOWSPEED, 50, 0, true, true);
            //forwardFullSpeed();
        }
        else if (YELLOW == colorOutput) // yellow is intersection
        {
            PlayToneEx((colorOutput + 1) * 100,400,1,FALSE);
            g_lastColor = YELLOW;
            isBoundary = true;
            Wait(500);
            //scan_surroundings();
            // After scanning intersection, need to move out of yellow first
            //forwardFullSpeed();
        }        
        else if (BLACK != colorOutput) // moving out of black road, get back.
        {
            //PlayToneEx((colorOutput + 1) * 100,400,1,FALSE);
            stayOnBlack();
            forwardFullSpeed();
        }
        else
        {
            forwardFullSpeed();
        }
    }
    // Function returns either on red or yellow
}

/* This function scans the surroundings of the robot.
   It takes readings of the colour of the 4 squares surrounding the
   intersection and returns an intersection variable which holds the data.
*/
intersection scan_surroundings(){
    intersection rsense;
    ////////////////////////////////////////////////////////////////////////////
    // TO DO:
    //
    // Implement a function in which the robot will scan the colour of the
    // surrounding squares at an interesection.
    // It will use the colour sensor to take readings from all four squares
    // in each of the NE, SE, SW, NW directions relative to the forward facing
    // direction of the robot.
    //
    ////////////////////////////////////////////////////////////////////////////
    ClearScreen();
    int curr_color;
    
    // Adjust sensor forward so wheels align with intersection, after this sensor should be over black
    if(readColor(100) == YELLOW) {
         RotateMotorEx(OUT_AC, SLOWSPEED, CENTER_DISTANCE, 0, true, true);
    }
    else
    {   // This function should be called when we already reached yellow intersection
        reportError("ERR:Scan Not Yellow");
    }

    // If robot enter yellow at an angle, sencor after previous adjustment may not be on black
    if (readColor(100) != BLACK)
    {
        stayOnBlack();
    }

    // TODO : make sure turning direction is correct: NE->SE->SW->NW
    turnRight();
    int corners[4] = {0, 0, 0, 0};
    for (int i = 0; i<4; i++) 
    {
        bool done = false;
        // robot spin and record non-black color as intersection colors
        until((curr_color = readColor(NUMREAD)) != BLACK);
        //Wait(50); // do another read in slight differnt spot, in case previous read was on color boundary
        corners[i] = readColor(NUMREADLESS);
        PlayToneEx((corners[i] + 1) * 100,400,4,FALSE);
        TextOut(0, lines[i], colors[corners[i]]);
        // wait til black to record next corner
        while (!done)
        {
            until (BLACK == readColor(NUMREAD));

            Wait(50); // so it's reading a slightly different spot
            if ( BLACK == readColor(NUMREADLESS))
            {
                done = true;    
            }
        }
    }

    rsense.NE = corners[0];
    rsense.SE = corners[1];
    rsense.SW = corners[2];
    rsense.NW = corners[3];

    locateRoadMiddle();

    Off(MOTORS);
    Wait(4000);

    ClearScreen();
    return rsense;
}


/* Given the original heading and a new heading, turns the robot to reflect
   the new heading

   This subroutine is used after the robot knows it's position
   */
sub change_direction(int orig, int new){
    ////////////////////////////////////////////////////////////////////////////
    // TO DO:
    //
    // Implement each of the turns specified below.
    //
    ////////////////////////////////////////////////////////////////////////////

    int change = new - orig;
    /* selects the appropriate turn based on the headings given*/
    switch (change % 4){
           case 3:
                //turn left 90 degrees
                turnLeft90();
                break;
           case 1:
                //turn right 90 degrees
                turnRight90();
                break;
           case 2:
                // 180 degree turn (2*90)
                turnRight90();
                turnRight90();
                break;
    }
}


/* Given a start coordinate, finish coordinate, and a heading, this function
   moves the robot from the start to finish.
   
   The coordinates given are in terms of index in the map array. The x and y
   coordinates need to be extracted from that index.
   
   After the robot has finished moving, the current heading of the robot is
   returned.
   
   This function is used after the robot knows it's own position.
*/
int move_to(int s, int f, int h){
    int sx, sy, fx, fy, tx, ty;
    int heading;
    // extract coordinates from given information
    sx = s/GHEIGHT;
    sy = s%GHEIGHT;
    fx = f/GHEIGHT;
    fy = f%GHEIGHT;
    
    /* calculate how far to go in manhatten distances */
    tx = fx - sx;
    ty = fy - sy;
    heading = h;

    ///////////////////////////////////////////////////////////////////////////
    // TO DO:
    //
    // Move the robot from the starting point described by (sx, sy) to (fx, fy)
    // Be sure to keep track of the direction the robot is facing when it
    // makes turns.
    //
    ////////////////////////////////////////////////////////////////////////////

    // Move along x axis first  (if needed)

    if (tx < 0) {
        // Turn robot EAST
        change_direction(heading, EAST);
        // Update heading
        heading = EAST;
        // Move forward (tx) times
        repeat (-tx) {
            move_robot();
        }

    } else if (tx > 0) {
        // Turn robot WEST
        change_direction(heading, WEST);
        // Update heading
        heading = WEST;
        // Move forward (tx) times
        repeat (tx) {
            move_robot();
        }
    }

    // Now move along y axis (if needed)
    if (ty < 0) {
        // Turn robot NORTH
        change_direction(heading, NORTH);
        // Update heading
        heading = NORTH;
        // Move forward (-ty) times
        repeat (-ty) {
            move_robot();
        }
    } else if (ty > 0) {
        // Turn robot SOUTH
        change_direction(heading, SOUTH);
        // Update heading
        heading = SOUTH;
        // Move forward (ty) times
        repeat (ty) {
            move_robot();
        }
    }
    return heading;
}

/* This function takes a particle and returns an updated particle after moving

   To "move" a particle is to move it forward in the direction of the particle.
   We move these particles in the same way we would move the robot.
   
   Upon reaching a boundary, the particle is turned 180 degrees around.

*/
particle move(particle p){

     ///////////////////////////////////////////////////////////////////////
     // TO DO:
     //
     // Move particle p forward one interesection in the direction it is
     // facing.
     // Similar to the robot's behaviour, if a particle reaches the end of
     // the map, it turns in the opposite direction and returns to the
     // previous intersection it was at.
     //
     ///////////////////////////////////////////////////////////////////////
    if (facing_red(p)) {
        /* Can't move particle to a red border, so we do a 180 and position
        remains the same as before */
        switch (p.theta) {
        case NORTH:
            p.theta = SOUTH;
            break;
        case EAST:
            p.theta = WEST;
            break;
        case SOUTH:
            p.theta = NORTH;
            break;
        case WEST:
            p.theta = EAST;
            break;
        }
    }
    else {
        /* Robot has room to move forward so we increment/decrement the
        appropriate coordinate by 1 */
        switch (p.theta) {
        case NORTH:
            p.y -= 1;
            break;
        case EAST:
            p.x += 1;
            break;
        case SOUTH:
            p.y += 1;
            break;
        case WEST:
            p.x -= 1;
            break;
        }
    }
         return p;
}

/* This function returns data on interesection surroundings for particles.

   Based on the map data array, we want the colour of the square at the given x
   and y coordinates in direction dir which is one of NE, SE, SW, NW.
   
   Take note that the heading given will change the percieved directions.
   For example, facing north, NE in terms of compass directions is northeast.
   Facing south however, NE in terms of compass directions is southwest.
   
   Because the robot does not know it's own heading, the particles must reflect
   this by using sensing relative to heading.
*/
int sense(intersection map[], int x, int y, int dir, int heading){

    ////////////////////////////////////////////////////////////////////////////
    // TO DO:
    //
    // Implement the function which checks the surroundings of the particle at
    // (x, y) facing the direction given by heading.
    //
    // The data you need to determine the particle's surroundings is given by
    // the map data array.
    //
    // The integer returned is the
    // colour of the square in the direction of dir which is one of NE, SE, SW,
    // or NW.
    // Keep in mind that the direction is relative to the heading as mentioned
    // in the function description.
    //
    ////////////////////////////////////////////////////////////////////////////

    /*  
        Heading:
        #define NORTH 100
        #define EAST 101
        #define SOUTH 102
        #define WEST 103

        dir:
        #define NORTHEAST 1000
        #define SOUTHEAST 1001
        #define SOUTHWEST 1002
        #define NORTHWEST 1003
    */
    int retColor = -1;
    int relativeDir = -1;

    intersection curr_intersection; // Intersection at x, y
    int uncorrected[4]; // Color values as if heading was NORTH
    int offset; // # of clockwise quarter turns from NORTH to actual heading
    int color; // Color value to return

    if ((dir >= NORTHEAST) && (dir <= NORTHWEST) && (x < GWIDTH) && (y < GHEIGHT))
    {
        curr_intersection = map[GHEIGHT*x + y];
        uncorrected[0] = curr_intersection.NE;
        uncorrected[1] = curr_intersection.SE;
        uncorrected[2] = curr_intersection.SW;
        uncorrected[3] = curr_intersection.NW;
        
        switch (heading) {
            case NORTH:
                offset = 0;
                break;
            case EAST:
                offset = 1;
                break;
            case SOUTH:
                offset = 2;
                break;
            case WEST:
                offset = 3;
        }
        switch (dir) {
            case NORTHEAST:
                color = uncorrected[offset];
                break;
            case SOUTHEAST:
                color = uncorrected[(1 + offset) % 4];
                break;
            case SOUTHWEST:
                color = uncorrected[(2 + offset) % 4];
                break;
            case NORTHWEST:
                color = uncorrected[(3 + offset) % 4];
        }
    }
    else // invalid arguments
    {
        // error
    }

    return color; 
}

bool facing_red(particle p) {

    ///////////////////////////////////////////////////////////////////
    // Return true iff the particle is directly facing a red border. //
    ///////////////////////////////////////////////////////////////////

    return ((p.x == 0             && p.theta == WEST)  ||
            (p.x == (GWIDTH - 1)  && p.theta == EAST)  ||
            (p.y == 0             && p.theta == NORTH) ||
            (p.y == (GHEIGHT - 1) && p.theta == SOUTH));
}

/* The main task which initializes data
   and executes the update loop for the particle filters
*/
task main(){

     /* variable declarations */
     intersection map [GWIDTH *GHEIGHT]; /* holds map data */
     
     int guess[3]; /* holds x y and theta of the best guess at robot's position */
     float robp = 0; /* holds the prob that the robot is at guess */
     intersection rsense; /* holds data about the robot's surroundings */

     particle list[GWIDTH*GHEIGHT*4]; /* list of particles */
     int psense[4]; /* holds data on a particle's surroundings */

     int i, j; /* variables for loop counters */
     int hits, misses; /* keeps track of how many of a particle's
                          surroundings match the robot's */
     float maxprob, totalprob;
     
     byte fd, charat;         /* variables for file descriptors and characters */
     string line;
     int target, dest; /* records the target and destination coordinates for use
                          after finding the robot's position */
     
     /* sensor initialization */
     SetSensorColorFull(IN_1);

     /* initialize the particle list, each coordinate has 4 particles, one for each direction */
   for (i = 0; i < GWIDTH*GHEIGHT*4;i = i + 4){
       list[i].x=(i/4)%GWIDTH;
       list[i].y=i/(4*GWIDTH);
       list[i].theta = NORTH;
       list[i].prob = 1.0/(GWIDTH*GHEIGHT*4);
       list[i+1].x=(i/4)%GWIDTH;
       list[i+1].y=i/(4*GWIDTH);
       list[i+1].theta = SOUTH;
       list[i+1].prob = 1.0/(GWIDTH*GHEIGHT*4);
       list[i+2].x=(i/4)%GWIDTH;
       list[i+2].y=i/(4*GWIDTH);
       list[i+2].theta = EAST;
       list[i+2].prob = 1.0/(GWIDTH*GHEIGHT*4);
       list[i+3].x=(i/4)%GWIDTH;
       list[i+3].y=i/(4*GWIDTH);
       list[i+3].theta = WEST;
       list[i+3].prob = 1.0/(GWIDTH*GHEIGHT*4);
   }
   
   /* Initialize the map and target from file

      The format of the file:
          - one line per intersection containing 4 integers seperated by spaces
            these integers represent NE SE SW NW respectively
          - the order of the intersections is rows top to bottom then columns
            left to right
          - after all the intersection data there are two lines with 2 integers
            each. this describes the target and destination that the robot must
            move to after finding its position
            
      Colour values are based on NXC colour sensor constants
      
      Array format:
            - indices are obtained using the formula i = GHEIGHT*x + y
            - each index contains an interesction element that holds information
              about it's surroundings
      */
   fd = fopen(FILENAME, "r");
   /* read as many lines as there are squares on the grid */
   for (i=0; i < GWIDTH*GHEIGHT; i++){
       fgets(line, READSIZE, fd);
       /* parse each line into the coresponding directions and store them in
          the map data array */
       for (j = 0; j < 7; j = j + 2){
           charat = StrIndex(line, j);
           switch (j){
                  case 0:
                       map[i].NE = ASCII_TO_INT(charat);
                       break;
                  case 2:
                       map[i].SE = ASCII_TO_INT(charat);
                       break;
                  case 4:
                       map[i].SW = ASCII_TO_INT(charat);
                       break;
                  case 6:
                       map[i].NW = ASCII_TO_INT(charat);
                       break;
           }
       }
   }
   /* read information about the target which should be following the map data */
   fgets(line, READSIZE, fd);
   charat = StrIndex(line,0);
   target = ASCII_TO_INT(charat);
   target = target*GHEIGHT; // add x coordinate calculation
   charat = StrIndex(line,2);
   target = target + ASCII_TO_INT(charat); // add y coordinate
        
   /* read information about the destination which sould be following the target data */
   fgets(line, READSIZE, fd);
   charat = StrIndex(line,0);
   dest = ASCII_TO_INT(charat);
   dest = dest*GHEIGHT; // add x coordinate calculation
   charat = StrIndex(line,2);
   dest = dest + ASCII_TO_INT(charat); // add y coordinate

   fclose(fd); /* file reading finished */

   ////////////////////////////////////////////////////////////////////////////
   // TO DO:
   //
   // Write the main particle filter execution loop. It will loop until a
   // particle weight reaches the threshold
   //
   // At each iteration the following steps take place:
   //    - robot checks its surroundings
   //    - each particle checks its surroundings and compares them with the
   //      robot's
   //    - adjust particle weights based on the comparison
   //    - normalize particle weights
   //    - find the best guess of the robot's position
   //    - move the robot and the particles forward to the next intersection
   //
   /////////////////////////////////////////////////////////////////////////////
    int listSize = GWIDTH*GHEIGHT*4;
    int best_particle = 0;


    // TODO .... start the robot moving to the red boarder/corner first??

    while (robp < THRESHOLD){ /* run the update loop until an acceptable
                             probability is obtained */
    /* implement me */

    /*
    while robp < threshold 
    {
        - move_robot() 
            //hit red boundary 
            - turn180() robots
                - ?? turn180 for all particles?     
            - return when hit intersection

            //if hit intersection
        - scan_surroundings() 
            - return robot-intersection

        - for each particle, move(particle) => updated-particle // move p forward by 1
            - for each dir, sense() and calculate robot-intersection-dir match/mistach
                - update particle.prob
        
        - normalize prob,
        - robp = highest particle.prob

        // TODO : loop counter? when do we decide better to re-init all particles?
    }
    */

        // TODO : keep moving straight; randomize direction; or go in large circle?

        
        //change_direction(1000 +Random(4), 1000 +Random(4)){ //Turns it Randomly
        move_robot();
        if (RED == g_lastColor)
        {
            turn180onRed();
            Wait(500);
            RotateMotorEx(MOTORS, SLOWSPEED, 50, 0, true, true);
            // TODO: need to turn180 for all particles?
        }
        else if (YELLOW == g_lastColor)
        {
            rsense = scan_surroundings();

            // update particles: move, then sense & calculate prob
            for (i = 0; i < listSize; i++)
            {
                list[i] = move(list[i]);
                hits = 0;
                misses = 0;

                for (j = 0; j < 4; j++)
                {
                    psense[j] = sense(map, list[i].x, list[i].y, 1000+j, list[i].theta);
                }

                if (psense[0] == rsense.NE)
                {
                    hits++;
                }
                else
                {
                    misses++;
                }

                if (psense[1] == rsense.SE)
                {
                    hits++;
                }
                else
                {
                    misses++;
                }

                if (psense[2] == rsense.SW)
                {
                    hits++;
                }
                else
                {
                    misses++;
                }

                if (psense[3] == rsense.NW)
                {
                    hits++;
                }
                else
                {
                    misses++;
                }

                //Prob = prob * MATCH^hits * MISMATCH^miss
                list[i].prob = list[i].prob * pow(MATCH,hits) * pow(MISMATCH,hits);                
            }

            // All particles updated... normalize prob and find current best

            /* Renormalization step*/
            totalprob = 0;
            maxprob = 0;
            for (i = 0; i < listSize; i++) {
                totalprob += list[i].prob;
            }

            for (i = 0; i < listSize; i++) {
                list[i].prob /= totalprob;
                if (list[i].prob > maxprob)
                {
                    maxprob = list[i].prob;
                    best_particle = i;
                }
            }

            //Set our robot best guess to the best particle
            robp = maxprob;
            guess[0] = list[best_particle].x;
            guess[1] = list[best_particle].y;
            guess[2] = list[best_particle].theta;
        }
        else
        {
            //error
        }

        // //Here we are lost so reset everything and try again
        // if (tries >= RESETTHRESHOLD)
        // {
        //     /*Reset Particle List*/
        //    for (i = 0; i < GWIDTH*GHEIGHT*4;i = i + 4){
        //        list[i].x=(i/4)%GWIDTH;
        //        list[i].y=i/(4*GWIDTH);
        //        list[i].theta = NORTH;
        //        list[i].prob = 1.0/(GWIDTH*GHEIGHT*4);
        //        list[i+1].x=(i/4)%GWIDTH;
        //        list[i+1].y=i/(4*GWIDTH);
        //        list[i+1].theta = SOUTH;
        //        list[i+1].prob = 1.0/(GWIDTH*GHEIGHT*4);
        //        list[i+2].x=(i/4)%GWIDTH;
        //        list[i+2].y=i/(4*GWIDTH);
        //        list[i+2].theta = EAST;
        //        list[i+2].prob = 1.0/(GWIDTH*GHEIGHT*4);
        //        list[i+3].x=(i/4)%GWIDTH;
        //        list[i+3].y=i/(4*GWIDTH);
        //        list[i+3].theta = WEST;
        //        list[i+3].prob = 1.0/(GWIDTH*GHEIGHT*4);
        //    }

        //     robp = 0;
        //     guess[0] = 0;
        //     guess[1] = 0;
        //     guess[2] = 0;
        // }

    }
    PlayToneEx(Random(1000) + 200, 400, 3, FALSE);

    //Print TEST CHECK IF WE KNOW WHERE WE ARE
    NumOut(0, LCD_LINE1, guess[0]); // x coord
    NumOut(0, LCD_LINE2, guess[1]); // y coord
    NumOut(0, LCD_LINE3, guess[2]); // heading

    Wait(5000);

    /* When we are fairly confident about the robot's position, we can move on
    to the task given.

    Once the robot has found where it is, it must head to the target given in
    the initialization file.
    After picking up the confidential item at the target point it must move to
    the delivery point given by the destination from the initialization file.

    */
    guess[2] = move_to(guess[0]*GHEIGHT + guess[1], target, guess[2]);
    PlayToneEx(Random(1000) + 200, 400, 3, FALSE);
    move_to(target, dest,guess[2]);
    PlayToneEx(Random(1000) + 200, 400, 3, FALSE);
}