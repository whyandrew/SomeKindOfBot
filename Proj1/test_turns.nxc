int color;
#define COLORSENSOR SENSOR_1

#define BLACK   1
#define WHITE   6
#define BLUE    2
#define GREEN   3
#define YELLOW  4
#define RED     5

#define MOTORS OUT_AC

mutex motorMutex; // All motor movement changes use this mutex
#define FULLSPEED   30
#define FULLSPEED_C FULLSPEED-5 // Motor OUT_C is stronger than A, reduce power to compensate
#define SLOWSPEED   30
#define SLOWSPEED_C SLOWSPEED-5

// Amount of motor sync-rotation to turn robot
#define DEGREE360 1040
#define DEGREE180 520
#define DEGREE90  260
#define DEGREE05  15

// Distance to be adjusted after sensor detects yellow intersection
// Use with FULLSPEED
#define CENTER_DISTANCE 125

// Num of reads to get best color result
#define NUMREAD 400
#define NUMREADLESS 200

/* Represents an interesection (yellow square) on the grid.

   Holds data on the surroundings of the intersection, namely coloured(or white)
   squares to the NE, SE, SW, NW of the interesection.
   
   Note that the directions are by default in terms of compass directions.
   When given a heading, the directions will change relative to the heading.
   */
struct intersection{

       int NE;
       int SE;
       int SW;
       int NW;
};

string colors[] = {
    "Color 0?",
    "Black   ", // 1
    "Blue    ", // 2
    "Green   ", // 3
    "Yellow  ", // 4
    "Red     ", // 5
    "White   ", // 6
    "Color 7?",
    "Color 8?",
    "Color 9?"
};

int lines[] = {
    LCD_LINE1,
    LCD_LINE2,
    LCD_LINE3,
    LCD_LINE4
};

/* function prototypes, to be added if needed
*/
intersection scan_surroundings();

/*
  Print color on LCD Screen Line 1
*/
inline void printColor(int color)
{
    TextOut(0, LCD_LINE1, colors[color]);
}

/*
    Take Color sensor reading 
    Return the most detected color
*/
int readColor(int numOfSamples)
{    
    int sample = 0;
    int colorSamples[] = {0,0,0,0,0,0,0}; // array index == color define
    int ret;

    for (int i = 0; i < numOfSamples; i++)
    {
        sample = COLORSENSOR;
        colorSamples[sample]++;        
    }

    ret = 1;
    for (int i = 2; i < 7; i++)
    {
        if (colorSamples[i] > colorSamples[ret])
        {
            ret = i;
        }
    }

    return ret;
}

// Rotate & position sensor to the middle of the black road's width
void locateRoadMiddle()
{
    TextOut(0, LCD_LINE2, "Locating road mid...");
    long startTime, turnTime;
    
    Off(MOTORS);
    // Check if sensor is currently on black or not
    // If on black, move to just outside edge of black
    if (readColor(NUMREAD) == BLACK)
    {
        OnRev(OUT_A, FULLSPEED);
        OnFwd(OUT_C, FULLSPEED_C);
        until( readColor(NUMREAD) != BLACK);
        Wait(50);
        Off(MOTORS);
    }

    // rotate left and time the width of black color
    OnFwd(OUT_A, FULLSPEED);
    OnRev(OUT_C, FULLSPEED_C);

    // TODO : need to do confirm of color for all the "until" statements in case of noise?
    until( readColor(NUMREAD) == BLACK);
    startTime = CurrentTick();
    Wait(100);
    until( readColor(NUMREAD) != BLACK);
    turnTime = CurrentTick() - startTime;

    Off(MOTORS);
    Wait(500);

    // Now move to middle of the width base on timestamp
    OnFwd(OUT_C, FULLSPEED_C);
    OnRev(OUT_A, FULLSPEED);
    Wait(turnTime * 0.75); // would be 0.5, but use .75 due to motors uneven power in turns
    Off(MOTORS);

    ClearScreen();
}

// Make a 90 turn until sensor see the next black road, 
void turn90(bool turnLeft)
{
    locateRoadMiddle();

    bool done = false;
    Off(MOTORS); 

    if (turnLeft)
    {
        TextOut(0, LCD_LINE2, "Turning LEFT....");
        OnFwd(OUT_A, SLOWSPEED);
        OnRev(OUT_C, SLOWSPEED_C);
    }
    else
    {
        TextOut(0, LCD_LINE2, "Turning RIGHT....");
        OnRev(OUT_A, SLOWSPEED);
        OnFwd(OUT_C, SLOWSPEED_C);
    }
    
    // First, spin til it's NOT black
    while (!done)
    {
        while(BLACK == readColor(NUMREADLESS)) {}

        //Wait(20); // so it's reading a slightly different spot
        if ( BLACK == readColor(NUMREADLESS))
        {
            done = true;    
        }
    }

    // Then, spin til it's black, and double check color
    while (!done)
    {
        while(BLACK != readColor(NUMREADLESS)) {}

        //Wait(20); // so it's reading a slightly different spot
        if ( BLACK == readColor(NUMREADLESS))
        {
            done = true;    
        }
    }

    ClearScreen();

    locateRoadMiddle();
    Off(MOTORS);
}

inline void forwardFullSpeed() 
{
    OnFwdSync(MOTORS, FULLSPEED, 0);
}

inline void forwardSlowMo()
{
    OnFwdSync(MOTORS, SLOWSPEED, 0);
}

inline void turnLeft90()
{
    turn90(true);
}

inline void turnRight90()
{
    turn90(false);
}

// Turn 180 degrees and also check if sensor is on black when finish
void turn180onRed()
{
    bool done = false;
    Off(MOTORS); 

    TextOut(0, LCD_LINE2, "Turning 180....");
    OnFwd(OUT_A, SLOWSPEED);
    OnRev(OUT_C, SLOWSPEED_C);

    // spin til it's black, and double check color
    while (!done)
    {
        while(BLACK != readColor(NUMREADLESS)) {}

        //Wait(20); // so it's reading a slightly different spot
        if ( BLACK == readColor(NUMREADLESS))
        {
            done = true;    
        }
    }

    ClearScreen();

    locateRoadMiddle();
    Off(MOTORS);
}

inline void turn(bool left, int degrees)
{
    if (left)
    {
        RotateMotorEx(OUT_AC, FULLSPEED, degrees, -100, true, true);
    }
    else // turn right
    {
        RotateMotorEx(OUT_AC, FULLSPEED, degrees, 100, true, true);
    }
}

inline void reportError(string msg)
{
    TextOut(0, LCD_LINE1, "***********************");
    TextOut(0, LCD_LINE2, msg);
    TextOut(0, LCD_LINE3, "***********************");
    Wait(5000);
    Stop(true);
}


/*
    Handle moving back on black route, assume already out of bound
*/
void stayOnBlack()
{
    int factor = 1;
    // always try left side first, true == left
    bool whichSide = true; 
    bool isDone = false;

    TextOut(0, LCD_LINE2, "Off road....");

    while (!isDone)
    {
        NumOut(0, LCD_LINE3, 5 * factor);

        // try left side
        turn(whichSide, DEGREE05 * factor);
        Wait(250);

        if (readColor(50) == BLACK)
        {
            isDone = true;
        }
        else
        {   // Left doesn't hit black, try right side
            // TODO : left and right turns are not even, may need to fudge the number a bit...
            turn(!whichSide, DEGREE05 * factor * 3 / 2);
            Wait(250);
            if (readColor(50) == BLACK)
            {
                isDone = true;
            }
        }
        factor += 1;
        if (factor > 20)
        {
            // TODO  : corner case when off black just before hitting red,
            // then sensor won't find any black at all by turning left/right.
            // Need to back up a bit but need to make sure after all these
            // turning/checking, the robot direction is still close to when it
            // first started this function (ie need make left & right turns even).
            reportError("ERROR: +100 degrees tested");
        }
    }

    locateRoadMiddle();

    ClearScreen();
}

/* Subroutine which moves the robot forward from one intersection to the next
*/
sub move_robot(){
    ////////////////////////////////////////////////////////////////////////////
    //  TO DO:
    //
    //  Complete this subroutine.
    //  Your robot will need to nagivates its way from one interesection to the
    //  next. If it reaches a red boundary, it will do a 180 degree turn and
    //  return to the previous intersection facing in the opposite direction.
    //
    //  You may need to account for motor "noise" as your robot will not always
    //  make turns perfectly and go straight forward each time.
    //
    ////////////////////////////////////////////////////////////////////////////

    int colorOutput;
    int colorCheck;
    forwardFullSpeed();

    //***** For DEMO ONLY **********
    int intersectionCount = 0;
    //******************************


    while (true)
    {
        while ((colorOutput = readColor(NUMREAD)) == BLACK)
        {
            // spin until it's not black
        }

        Off(MOTORS);

        // Double check color. Possible unreliable previous read if it happens at boundary of 2 colors
        colorCheck = readColor(NUMREAD);
        if (colorCheck != colorOutput)
        {
            TextOut(0, LCD_LINE5, "NOISE: ");
            TextOut(0, LCD_LINE6, colors[colorOutput]);
            colorOutput = colorCheck;
            Wait(2000);
            ClearScreen();
        }
        else
        {
            Wait(500);
        }

        printColor(colorOutput);

        if (RED == colorOutput) // Hit red wall, do 180 turn
        {
            PlayToneEx((colorOutput + 1) * 100,400,1,FALSE);
            // Adjust forward so sensor is in middle of red before turning 180
            RotateMotorEx(OUT_AC, SLOWSPEED, CENTER_DISTANCE, 0, true, true);
            turn180onRed();
            Wait(500);
            RotateMotorEx(MOTORS, SLOWSPEED, 50, 0, true, true);
            forwardFullSpeed();
        }
        else if (YELLOW == colorOutput) // yellow is intersection
        {
            PlayToneEx((colorOutput + 1) * 100,400,1,FALSE);
            Wait(1000);
            //***** For DEMO ONLY **********
            //scan_surroundings();

            RotateMotorEx(OUT_AC, SLOWSPEED, CENTER_DISTANCE, 0, true, true);
            intersectionCount++;
            if (intersectionCount & 0x1)
            {
                turnLeft90();
            }
            else 
            {
                turnRight90();
            }
            //******************************
            // After scanning intersection, need to move out of yellow first
            forwardFullSpeed();
        }        
        else if (BLACK != colorOutput) // moving out of black road, get back.
        {
            //PlayToneEx((colorOutput + 1) * 100,400,1,FALSE);
            stayOnBlack();
            forwardFullSpeed();
        }
        else
        {
            forwardFullSpeed();
        }
    }
}

/* This function scans the surroundings of the robot.
   It takes readings of the colour of the 4 squares surrounding the
   intersection and returns an intersection variable which holds the data.
*/
intersection scan_surroundings(){
    intersection rsense;
    ////////////////////////////////////////////////////////////////////////////
    // TO DO:
    //
    // Implement a function in which the robot will scan the colour of the
    // surrounding squares at an interesection.
    // It will use the colour sensor to take readings from all four squares
    // in each of the NE, SE, SW, NW directions relative to the forward facing
    // direction of the robot.
    //
    ////////////////////////////////////////////////////////////////////////////

    ClearScreen();
    int curr_color;
    
    // Adjust sensor forward so wheels align with intersection, after this sensor should be over black
    if(readColor(100) == YELLOW) {
         RotateMotorEx(OUT_AC, SLOWSPEED, CENTER_DISTANCE, 0, true, true);
    }
    else
    {   // This function should be called when we already reached yellow intersection
        reportError("ERR:Scan Not Yellow");
    }

    // If robot enter yellow at an angle, sencor after previous adjustment may not be on black
    if (readColor(100) != BLACK)
    {
        stayOnBlack();
    }

    OnFwd(OUT_A, FULLSPEED);
    OnRev(OUT_C, FULLSPEED_C);
    int corners[4] = {0, 0, 0, 0};
    for (int i = 0; i<4; i++) 
    {
        bool done = false;
        // robot spin and record non-black color as intersection colors
        until((curr_color = readColor(NUMREAD)) != BLACK);
        //Wait(50); // do another read in slight differnt spot, in case previous read was on color boundary
        corners[i] = readColor(NUMREADLESS);
        PlayToneEx((corners[i] + 1) * 100,400,4,FALSE);
        TextOut(0, lines[i], colors[corners[i]]);
        // wait til black to record next corner
        while (!done)
        {
            until (BLACK == readColor(NUMREAD));

            Wait(50); // so it's reading a slightly different spot
            if ( BLACK == readColor(NUMREADLESS))
            {
                done = true;    
            }
        }
    }

    locateRoadMiddle();

    Off(MOTORS);
    Wait(4000);

    ClearScreen();
    return rsense;
}




task main() {
    SetSensorColorFull(IN_1);

    move_robot();
    

}

